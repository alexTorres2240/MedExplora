import { MarkerClusterer, type MarkerClustererOptions } from '@googlemaps/markerclusterer';
import { type InjectionKey, type ShallowRef } from 'vue';
export declare const MARKER_CLUSTERER_INJECTION_KEY: InjectionKey<{
    markerClusterer: ShallowRef<MarkerClusterer | undefined>;
    requestRerender: () => void;
}>;
declare const _default: __VLS_WithSlots<import("vue").DefineComponent<{
    options?: Omit<MarkerClustererOptions, "map">;
}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    click: (payload: MarkerClusterer) => any;
    clusteringbegin: (payload: MarkerClusterer) => any;
    clusteringend: (payload: MarkerClusterer) => any;
}, string, import("vue").PublicProps, Readonly<{
    options?: Omit<MarkerClustererOptions, "map">;
}> & Readonly<{
    onClick?: ((payload: MarkerClusterer) => any) | undefined;
    onClusteringbegin?: ((payload: MarkerClusterer) => any) | undefined;
    onClusteringend?: ((payload: MarkerClusterer) => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>, {
    default?: (props: {}) => any;
}>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
