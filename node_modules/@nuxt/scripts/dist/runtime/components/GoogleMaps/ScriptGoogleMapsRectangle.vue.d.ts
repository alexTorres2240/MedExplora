type __VLS_Props = {
    options?: Omit<google.maps.RectangleOptions, 'map'>;
};
declare const _default: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    click: (payload: google.maps.MapMouseEvent) => any;
    contextmenu: (payload: google.maps.MapMouseEvent) => any;
    dblclick: (payload: google.maps.MapMouseEvent) => any;
    drag: (payload: google.maps.MapMouseEvent) => any;
    dragend: (payload: google.maps.MapMouseEvent) => any;
    dragstart: (payload: google.maps.MapMouseEvent) => any;
    mousedown: (payload: google.maps.MapMouseEvent) => any;
    mousemove: (payload: google.maps.MapMouseEvent) => any;
    mouseout: (payload: google.maps.MapMouseEvent) => any;
    mouseover: (payload: google.maps.MapMouseEvent) => any;
    mouseup: (payload: google.maps.MapMouseEvent) => any;
    bounds_changed: () => any;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onClick?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onContextmenu?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onDblclick?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onDrag?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onDragend?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onDragstart?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onMousedown?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onMousemove?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onMouseout?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onMouseover?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onMouseup?: ((payload: google.maps.MapMouseEvent) => any) | undefined;
    onBounds_changed?: (() => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export default _default;
